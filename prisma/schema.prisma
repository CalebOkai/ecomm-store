generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ProductType {
  digital // Delivered electronically
  physical // Tangible, requires shipping
  service // Non-tangible services (e.g., consulting, repair services)
  bundle // Combination of digital and/or physical products sold as a package
}

enum ProductCategory {
  // Digital Goods
  airtime // Mobile airtime top-ups
  voucher // Gift cards or prepaid vouchers (e.g., Amazon, iTunes)
  subscription // Subscriptions for digital services (e.g., Netflix, Spotify)
  ebook // Electronic books
  gaming // Game credits, skins, or gift cards for platforms like Steam
  utilities // Digital payments for utility bills (e.g., electricity, water)
  entertainment // Movie tickets, concert passes, or digital event access
  license // Software licenses (e.g., productivity tools, antivirus)

  // Physical Goods
  electronics // Mobile phones, laptops, gadgets
  apparel // Clothing, footwear, accessories
  appliance // Kitchen appliances, smart home devices
  books // Physical books, e-books (if physical and digital)
  cosmetics // Cosmetics, skincare, grooming products
  groceries // Food, drinks

  // Hybrid Goods
  bundle // Combination of digital and/or physical products
  service // Non-tangible services (e.g., consulting, repair, tutoring)
}

enum TxnStatus {
  unstarted
  processing
  successful
  cancelled
  failed
  // Refund States
  refundRequested
  refundProcesing
  refundSuccess
  refundDenied
  refundFailed
}

enum PaymentMethod {
  card
  cash
  mtnMomo
  vodaCash
  airtelTigoMoney
  paypal
  applePay
  googlePay
}

enum InventoryTxnType {
  restock // Stock added to inventory
  sale // Stock subtracted due to sale
  return // Stock added back due to return
}

model InventoryTxn {
  id              Int                          @id @default(autoincrement())
  type            InventoryTxnType
  description     String                       @default("")
  quantity        Int // Value should be positive for types: ["restock", "return"], negative for ["sale"]
  costPrice       Int? // Required for type: "restock"
  sellingPrice    Int // If `orderItem` is present, should be the same value as `orderItem.unitPrice`
  productOption   ProductVariantPropertyOption @relation(fields: [productOptionId], references: [id], onDelete: Cascade)
  productOptionId Int
  orderItem       OrderItem?                   @relation(fields: [orderItemId], references: [id], onDelete: SetNull)
  orderItemId     Int? // Set Order Item on types: ["sale", "return"]
  createdAt       DateTime                     @default(now())
  updatedAt       DateTime                     @updatedAt

  @@unique([productOptionId, orderItemId])
}

model Product {
  id            String           @id @default(uuid())
  name          String // Flannel Shirt
  details       String           @default("")
  images        String[]         @default([])
  active        Boolean          @default(true)
  currency      String
  type          ProductType
  category      ProductCategory
  storeId       String
  uploadedById  String
  variants      ProductVariant[]
  wishlistItems WishlistItem[]
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
}

model ProductVariant {
  id         String                   @id @default(uuid())
  name       String // E.g Long-sleeved / Short-sleeved Flannel Shirt
  details    String                   @default("")
  active     Boolean                  @default(true)
  product    Product                  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  String
  properties ProductVariantProperty[]
  createdAt  DateTime                 @default(now())
  updatedAt  DateTime                 @updatedAt
}

model ProductVariantProperty {
  id               Int                            @id @default(autoincrement())
  name             String // E.g., "Colour", "Size", "Material"
  details          String                         @default("")
  optionRegex      String? // Accepted string formats for each option
  options          ProductVariantPropertyOption[]
  productVariant   ProductVariant                 @relation(fields: [productVariantId], references: [id], onDelete: Cascade)
  productVariantId String
  createdAt        DateTime                       @default(now())
  updatedAt        DateTime                       @updatedAt
}

model ProductVariantPropertyOption {
  id                Int                     @id @default(autoincrement())
  name              String // E.g., "Red", "L", "Cotton"
  details           String                  @default("")
  images            String[]                @default([])
  // Fixed-value pricing
  price             Int?
  // Ranged pricing
  minPrice          Int?
  maxPrice          Int?
  inventory         Int                     @default(0)
  variantProperty   ProductVariantProperty  @relation(fields: [variantPropertyId], references: [id], onDelete: Cascade)
  variantPropertyId Int
  inventoryTxns     InventoryTxn[]
  discounts         ProductOptionDiscount[]
  cartItems         CartItem[]
  createdById       String
  createdAt         DateTime                @default(now())
  updatedAt         DateTime                @updatedAt
  OrderItem         OrderItem[]
}

model ProductOptionDiscount {
  id             Int                            @id @default(autoincrement())
  active         Boolean                        @default(true)
  code           String                         @unique
  description    String                         @default("")
  percentage     Decimal? // Percentage-based discount
  amount         Int? // Fixed amount discount
  activeFrom     DateTime?
  activeTo       DateTime?
  daysDuration   Int?
  createdById    String
  productOptions ProductVariantPropertyOption[]
  orderDiscounts OrderItemDiscount[]
  createdAt      DateTime                       @default(now())
  updatedAt      DateTime                       @updatedAt
}

model WishlistItem {
  id        Int     @id @default(autoincrement())
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  userId    String

  @@unique([productId, userId])
}

model CartItem {
  id              Int                          @id @default(autoincrement())
  quantity        Int
  totalCost       Int
  userId          String
  productOption   ProductVariantPropertyOption @relation(fields: [productOptionId], references: [id], onDelete: Cascade)
  productOptionId Int

  @@unique([productOptionId, userId])
}

model OrderItem {
  id              Int                          @id @default(autoincrement())
  unitPrice       Int
  quantity        Int
  totalCost       Int
  tax             Int?
  refundAmount    Int?
  currency        String // Currency in which the user pays for this item
  txnResponse     Json? // Digital product details would be stored here. Metadata for physical products can be stored as well.
  status          TxnStatus                    @default(unstarted)
  productOption   ProductVariantPropertyOption @relation(fields: [productOptionId], references: [id], onDelete: Restrict)
  productOptionId Int
  order           Order                        @relation(fields: [orderId], references: [id], onDelete: Restrict)
  orderId         String
  discount        OrderItemDiscount?
  inventoryTxns   InventoryTxn[] // Only update inventory after purchase is successful

  @@unique([productOptionId, orderId])
}

model OrderItemDiscount {
  id          Int                   @id @default(autoincrement())
  periodStart DateTime?
  periodEnd   DateTime?
  discount    ProductOptionDiscount @relation(fields: [discountId], references: [id], onDelete: Restrict)
  discountId  Int
  orderItem   OrderItem             @relation(fields: [orderItemId], references: [id], onDelete: Restrict)
  orderItemId Int                   @unique
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
}

model Order {
  id            String        @id @default(uuid())
  totalCost     Int
  purchasedById String
  status        TxnStatus     @default(unstarted)
  paymentMethod PaymentMethod @default(cash)
  orderItems    OrderItem[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  completedAt   DateTime?
}
